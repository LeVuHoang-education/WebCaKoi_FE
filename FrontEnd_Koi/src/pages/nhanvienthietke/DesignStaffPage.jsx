// import { useState } from "react";
// import "./DesignStaffPage.css";

// const DesignStaffPage = () => {
//   const [currentTab, setCurrentTab] = useState("orders");
//   const [orders, setOrders] = useState([]);
//   const [newOrder, setNewOrder] = useState({
//     customer: "",
//     description: "",
//     status: "",
//   });
//   const [isAddingOrder, setIsAddingOrder] = useState(false);
//   const [editingOrderId, setEditingOrderId] = useState(null); // ID c·ªßa ƒë∆°n h√†ng ƒëang ƒë∆∞·ª£c ch·ªânh s·ª≠a
//   const [editingOrder, setEditingOrder] = useState({}); // Th√¥ng tin ƒë∆°n h√†ng ƒëang ƒë∆∞·ª£c ch·ªânh s·ª≠a

//   // State qu·∫£n l√Ω d·ªØ li·ªáu form g·ª≠i t√†i li·ªáu
//   const [form, setForm] = useState({
//     customerName: "",
//     designFile: null,
//   });

//   const handleInputChange = (e) => {
//     const { name, value } = e.target;
//     setForm((prevForm) => ({ ...prevForm, [name]: value }));
//   };

//   const handleFileChange = (e) => {
//     setForm((prevForm) => ({ ...prevForm, designFile: e.target.files[0] }));
//   };

//   const handleSubmit = (e) => {
//     e.preventDefault();
//     console.log("G·ª≠i t√†i li·ªáu:", form);
//     alert("T√†i li·ªáu ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng!");
//   };

//   const handleAddOrderClick = () => {
//     setIsAddingOrder(true);
//   };

//   const handleNewOrderChange = (e) => {
//     const { name, value } = e.target;
//     setNewOrder((prevOrder) => ({ ...prevOrder, [name]: value }));
//   };

//   const handleSaveNewOrder = () => {
//     setOrders((prevOrders) => [
//       ...prevOrders,
//       {
//         id: prevOrders.length + 1,
//         customer: newOrder.customer,
//         description: newOrder.description,
//         status: newOrder.status,
//       },
//     ]);
//     setIsAddingOrder(false);
//     setNewOrder({ customer: "", description: "", status: "" });
//   };

//   const handleEditClick = (order) => {
//     setEditingOrderId(order.id);
//     setEditingOrder({ ...order });
//   };

//   const handleEditOrderChange = (e) => {
//     const { name, value } = e.target;
//     setEditingOrder((prevOrder) => ({ ...prevOrder, [name]: value }));
//   };

//   const handleSaveEdit = () => {
//     setOrders((prevOrders) =>
//       prevOrders.map((order) =>
//         order.id === editingOrderId ? { ...editingOrder } : order
//       )
//     );
//     setEditingOrderId(null);
//   };

//   return (
//     <div className="design-staff-page">
//       <div className="sidebar">
//         <h2>Qu·∫£n l√Ω thi·∫øt k·∫ø</h2>
//         <ul>
//           <li
//             className={currentTab === "orders" ? "active" : ""}
//             onClick={() => setCurrentTab("orders")}
//           >
//             Danh s√°ch ƒë∆°n h√†ng
//           </li>
//           <li
//             className={currentTab === "upload" ? "active" : ""}
//             onClick={() => setCurrentTab("upload")}
//           >
//             G·ª≠i t√†i li·ªáu thi·∫øt k·∫ø
//           </li>
//         </ul>
//       </div>

//       <div className="main-content">
//         {currentTab === "orders" && (
//           <section className="order-list">
//             <h3>ƒê∆°n h√†ng ch·ªù thi·∫øt k·∫ø</h3>

//             {/* Hi·ªÉn th·ªã danh s√°ch ƒë∆°n h√†ng n·∫øu c√≥ */}
//             {orders.length > 0 ? (
//               <ul>
//                 {orders.map((order) => (
//                   <li key={order.id}>
//                     {editingOrderId === order.id ? (
//                       <>
//                         <label>
//                           Kh√°ch h√†ng:
//                           <input
//                             type="text"
//                             name="customer"
//                             value={editingOrder.customer}
//                             onChange={handleEditOrderChange}
//                           />
//                         </label>
//                         <br />
//                         <label>
//                           M√¥ t·∫£:
//                           <input
//                             type="text"
//                             name="description"
//                             value={editingOrder.description}
//                             onChange={handleEditOrderChange}
//                           />
//                         </label>
//                         <br />
//                         <label>
//                           Tr·∫°ng th√°i:
//                           <input
//                             type="text"
//                             name="status"
//                             value={editingOrder.status}
//                             onChange={handleEditOrderChange}
//                           />
//                         </label>
//                         <br />
//                         <button onClick={handleSaveEdit} className="btn-save">
//                           L∆∞u
//                         </button>
//                       </>
//                     ) : (
//                       <>
//                         <strong>Kh√°ch h√†ng:</strong> {order.customer} <br />
//                         <strong>M√¥ t·∫£:</strong> {order.description} <br />
//                         <strong>Tr·∫°ng th√°i:</strong> {order.status} <br />
//                         <button
//                           onClick={() => handleEditClick(order)}
//                           className="btn-update"
//                         >
//                           C·∫≠p nh·∫≠t
//                         </button>
//                       </>
//                     )}
//                   </li>
//                 ))}
//               </ul>
//             ) : (
//               <p>Ch∆∞a c√≥ ƒë∆°n h√†ng n√†o. Nh·∫•n Th√™m ƒë∆°n h√†ng m·ªõi ƒë·ªÉ b·∫Øt ƒë·∫ßu.</p>
//             )}

//             {/* N√∫t th√™m ƒë∆°n h√†ng m·ªõi */}
//             <button onClick={handleAddOrderClick} className="btn-add-order">
//               Th√™m ƒë∆°n h√†ng m·ªõi
//             </button>

//             {/* Form th√™m ƒë∆°n h√†ng m·ªõi */}
//             {isAddingOrder && (
//               <div className="new-order-form">
//                 <h4>Th√™m ƒë∆°n h√†ng m·ªõi</h4>
//                 <input
//                   type="text"
//                   name="customer"
//                   placeholder="T√™n kh√°ch h√†ng"
//                   value={newOrder.customer}
//                   onChange={handleNewOrderChange}
//                   style={{
//                     padding: "8px",
//                     width: "100%",
//                     marginBottom: "10px",
//                   }}
//                 />
//                 <input
//                   type="text"
//                   name="description"
//                   placeholder="M√¥ t·∫£ ƒë∆°n h√†ng"
//                   value={newOrder.description}
//                   onChange={handleNewOrderChange}
//                   style={{
//                     padding: "8px",
//                     width: "100%",
//                     marginBottom: "10px",
//                   }}
//                 />
//                 <input
//                   type="text"
//                   name="status"
//                   placeholder="Tr·∫°ng th√°i"
//                   value={newOrder.status}
//                   onChange={handleNewOrderChange}
//                   style={{
//                     padding: "8px",
//                     width: "100%",
//                     marginBottom: "10px",
//                   }}
//                 />
//                 <button onClick={handleSaveNewOrder} className="btn-save">
//                   L∆∞u ƒë∆°n h√†ng
//                 </button>
//               </div>
//             )}
//           </section>
//         )}

//         {currentTab === "upload" && (
//           <section className="upload-form">
//             <h3>G·ª≠i t√†i li·ªáu thi·∫øt k·∫ø</h3>
//             <form onSubmit={handleSubmit}>
//               <div className="form-group">
//                 <label>T√™n kh√°ch h√†ng:</label>
//                 <input
//                   type="text"
//                   name="customerName"
//                   value={form.customerName}
//                   onChange={handleInputChange}
//                   required
//                 />
//               </div>
//               <div className="form-group">
//                 <label>T·∫£i l√™n file thi·∫øt k·∫ø:</label>
//                 <input
//                   type="file"
//                   name="designFile"
//                   onChange={handleFileChange}
//                   required
//                 />
//               </div>
//               <button type="submit" className="btn-submit">
//                 G·ª≠i t√†i li·ªáu
//               </button>
//             </form>
//           </section>
//         )}
//       </div>
//     </div>
//   );
// };

// export default DesignStaffPage;

import { useState, useEffect } from "react";
import "./DesignStaffPage.css";
import { Button } from "antd";
import DesignForm from "./DesignForm";
import { useNavigate } from "react-router-dom";
import FormUpdate from "./FormUpdate";
import DeleteFile from "./DeleteFile";

const DesignStaffPage = () => {
  const [currentTab, setCurrentTab] = useState("orders");
  const [orders, setOrders] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState("");
  const [userId, setUserId] = useState();
  console.log("üöÄ ~ DesignStaffPage ~ userId:", userId);
  const [recordId, setRecordId] = useState();
  const [open, setOpen] = useState(false);
  const [openDelete, setOpenDelete] = useState(false);
  const [designs, setDesigns] = useState([]); // L∆∞u d·ªØ li·ªáu t·ª´ API d·ªØ li·ªáu b·∫£ng v·∫Ω
  const [sortOrder, setSortOrder] = useState("asc"); // "asc" ho·∫∑c "desc"
  // L·∫•y token t·ª´ localStorage (ho·∫∑c sessionStorage n·∫øu b·∫°n l∆∞u n√≥ ·ªü ƒë√≥)
  const token = localStorage.getItem("token"); // ƒêi·ªÅu ch·ªânh c√°ch l·∫•y token t√πy thu·ªôc v√†o c√°ch b·∫°n l∆∞u n√≥.

  // chuy·ªÉn trang
  const renderContent = () => {
    switch (currentTab) {
      case "orders":
        return <div>Danh s√°ch ƒë∆°n h√†ng</div>;
      case "upload":
        return <div>ƒê∆°n h√†ng ƒë√£ thi·∫øt k·∫ø</div>;
      default:
        return <div>Ch·ªçn m·ªôt tab ƒë·ªÉ xem n·ªôi dung</div>;
    }
  };

  // Fetch d·ªØ li·ªáu ƒë∆°n h√†ng t·ª´ API
  const fetchOrders = async () => {
    setLoading(true);
    setError(""); // Reset l·ªói c≈©

    if (!token) {
      setError("Token kh√¥ng h·ª£p l·ªá ho·∫∑c kh√¥ng t·ªìn t·∫°i.");
      return;
    }

    try {
      const response = await fetch(
        "http://localhost:8081/api/v1/designs/get-orders-inprogress",
        {
          method: "GET", // HTTP method GET
          headers: {
            "Content-Type": "application/json", // ƒê·ªãnh d·∫°ng d·ªØ li·ªáu l√† JSON
            Authorization: `Bearer ${token}`, // Th√™m token v√†o header
          },
        }
      );

      if (!response.ok) {
        const errorData = await response.json();
        console.log("Error status:", response.status);
        console.log("Error details:", errorData);
        setError("Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu");
        return;
      }

      const data = await response.json();
      setOrders(data.data); // C·∫≠p nh·∫≠t d·ªØ li·ªáu ƒë∆°n h√†ng
    } catch (error) {
      setError("L·ªói k·∫øt n·ªëi API");
    } finally {
      setLoading(false);
    }
  };
  console.log(orders);

  // Fetch d·ªØ li·ªáu khi component ƒë∆∞·ª£c mount
  useEffect(() => {
    fetchOrders();
  }, []);

  // ========================================l·∫•y d·ªØ li·ªáu b·∫£n v·∫Ω ƒë√£ ƒë∆∞·ª£c post====================================================
  useEffect(() => {
    const fetchDesigns = async () => {
      try {
        const response = await fetch("http://localhost:8081/api/v1/designs", {
          method: "GET",
          headers: {
            Authorization: `Bearer ${token}`,
            "Content-Type": "application/json",
          },
        });

        if (!response.ok) {
          throw new Error(`HTTP error! Status: ${response.status}`);
        }

        const data = await response.json(); // L·∫•y d·ªØ li·ªáu JSON t·ª´ ph·∫£n h·ªìi
        console.log("üöÄ ~ fetchDesigns ~ data:", data);
        setDesigns(data.data.content); // L∆∞u d·ªØ li·ªáu v√†o state
      } catch (err) {
        setError(err.message); // L∆∞u th√¥ng b√°o l·ªói
      } finally {
        setLoading(false); // T·∫Øt tr·∫°ng th√°i loading
      }
    };

    fetchDesigns();
  }, []);

  if (loading) {
    return <div>Loading...</div>; // Hi·ªÉn th·ªã tr·∫°ng th√°i ƒëang t·∫£i
  }

  if (error) {
    return <div>Error: {error}</div>; // Hi·ªÉn th·ªã l·ªói n·∫øu c√≥
  }

  // ==========================sort recoder ID==================================

  const handleSort = () => {
    const sortedDesigns = [...designs].sort((a, b) => {
      if (sortOrder === "asc") {
        return a.recordId - b.recordId;
      } else {
        return b.recordId - a.recordId;
      }
    });
    setDesigns(sortedDesigns);
    setSortOrder(sortOrder === "asc" ? "desc" : "asc"); // ƒê·ªïi tr·∫°ng th√°i s·∫Øp x·∫øp
  };

  // ========================================= n·ªôi dung trang=================================
  return (
    <>
      <div className="design-staff-page">
        <div className="sidebar">
          <h2>Qu·∫£n l√Ω thi·∫øt k·∫ø</h2>
          <ul>
            <li
              onClick={() => setCurrentTab("orders")} // Chuy·ªÉn tab sang "nhanvien"
              className={currentTab === "nhanvien" ? "active" : ""}
            >
              Danh s√°ch ƒë∆°n h√†ng
            </li>
            <li
              onClick={() => setCurrentTab("upload")} // Chuy·ªÉn tab sang "phananh"
              className={currentTab === "upload" ? "active" : ""}
            >
              ƒê∆°n h√†ng ƒë√£ thi·∫øt k·∫ø
            </li>
          </ul>
        </div>
        <div className="main-content">
          {currentTab === "orders" && (
            <section className="order-list">
              <h3>Danh s√°ch ƒë∆°n h√†ng</h3>

              {/* Hi·ªÉn th·ªã l·ªói n·∫øu c√≥ */}
              {error && <p style={{ color: "red" }}>{error}</p>}

              {/* Hi·ªÉn th·ªã loading khi ƒëang t·∫£i */}
              {loading ? (
                <p>ƒêang t·∫£i...</p>
              ) : (
                <table>
                  <thead>
                    <tr>
                      <th>Order ID</th>
                      <th>Username</th>
                      <th>Design Details</th>
                      <th>Start Date</th>
                      <th>End Date</th>

                      <th>Action</th>
                    </tr>
                  </thead>
                  <tbody>
                    {Array.isArray(orders) && orders.length > 0 ? (
                      orders.map((order) => (
                        <tr key={order.orderId}>
                          <td>{order.orderId}</td>
                          <td>{order.userName}</td>
                          <td>{order.designDetails}</td>
                          <td>{order.startDate}</td>
                          <td>{order.endDate}</td>
                          <td>
                            <Button
                              onClick={() => {
                                setUserId(order.userId);
                                setOpen(true);
                              }}
                            >
                              l·∫≠p b·∫£ng thi·∫øt k·∫ø
                            </Button>
                          </td>
                        </tr>
                      ))
                    ) : (
                      <tr>
                        <td colSpan="5">Kh√¥ng c√≥ ƒë∆°n h√†ng n√†o.</td>
                      </tr>
                    )}
                  </tbody>
                </table>
              )}
            </section>
          )}
          {currentTab === "upload" && (
            <section className="upload-form">
              <h3>Danh s√°ch b·∫£n v·∫Ω ƒë√£ g·ª≠i</h3>
              {/* Hi·ªÉn th·ªã l·ªói n·∫øu c√≥ */}
              {error && <p style={{ color: "red" }}>{error}</p>}

              {/* Hi·ªÉn th·ªã loading khi ƒëang t·∫£i */}
              {loading ? (
                <p>ƒêang t·∫£i...</p>
              ) : (
                <table>
                  <thead>
                    <tr>
                      <th onClick={handleSort} style={{ cursor: "pointer" }}>
                        Record ID {sortOrder === "asc" ? "‚Üë" : "‚Üì"}
                      </th>
                      <th>Engineer Name</th>
                      <th>Customer Name</th>
                      <th>Drawing File</th>
                      <th>Customer Feedback</th>
                      <th>Creation Date</th>
                      <th>Action</th>
                    </tr>
                  </thead>
                  <tbody>
                    {Array.isArray(designs) && designs.length > 0 ? (
                      designs.map((design) => (
                        <tr key={design.recordId}>
                          <td>{design.recordId}</td>
                          <td>{design.engineerName}</td>
                          <td>{design.customerName}</td>
                          <td>
                            <a
                              href={design.drawingFile}
                              target="_blank"
                              rel="noopener noreferrer"
                            >
                              View File
                            </a>
                          </td>
                          <td>{design.customerFeedback}</td>
                          <td>{design.creationDate}</td>
                          <td>
                            {/* <Button
                            // onClick={() => {
                            //   setUserId(design.recordId);
                            //   setOpen(true);
                            // }}
                            >
                              Update Design
                            </Button> */}
                            <Button
                              disabled={design.customerFeedback === null} // Ki·ªÉm tra n·∫øu customerFeedback l√† null
                              onClick={() => {
                                setRecordId(design.recordId);
                                setOpen(true);
                              }}
                            >
                              Update Design
                            </Button>
                            <Button
                              onClick={() => {
                                setRecordId(design.recordId);
                                setOpenDelete(true);
                              }}
                            >
                              x√≥a b·∫£n v·∫Ω
                            </Button>
                          </td>
                        </tr>
                      ))
                    ) : (
                      <tr>
                        <td colSpan="7">No designs available.</td>
                      </tr>
                    )}
                  </tbody>
                </table>
              )}
            </section>
          )}
        </div>
      </div>
      <DesignForm
        userId={userId}
        open={open}
        handleClose={() => {
          setUserId(undefined);
          setOpen(false);
        }}
      />

      <FormUpdate
        recordId={recordId}
        open={open}
        handleClose={() => {
          setRecordId(undefined);
          setOpen(false);
        }}
      />

      <DeleteFile
        recordId={recordId}
        open={openDelete}
        handleClose={() => {
          setRecordId(undefined);
          setOpenDelete(false);
        }}
      />
    </>
  );
};

export default DesignStaffPage;
