import { useState, useEffect } from "react";
import "./ConsultingStaff.css";
import { Button } from "antd";
import { useNavigate } from "react-router-dom";
import OrderDetailsModal from "./OrderDetailsModal";
import QuoForm from "./QuoForm";

const ConsultingStaff = () => {
  const [currentTab, setCurrentTab] = useState("orders");
  const [orders, setOrders] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState("");
  const [userId, setUserId] = useState();
  const [orderId, setOrderId] = useState();
  const [selectedOrderId, setSelectedOrderId] = useState(null);
  console.log("üöÄ ~ DesignStaffPage ~ userId:", userId);
  const [recordId, setRecordId] = useState();
  const [open, setOpen] = useState(false);
  const [openQuo, setOpenQuo] = useState(false);
  const [designs, setDesigns] = useState([]); // L∆∞u d·ªØ li·ªáu t·ª´ API d·ªØ li·ªáu b·∫£ng v·∫Ω
  const [sortOrder, setSortOrder] = useState("asc"); // "asc" ho·∫∑c "desc"
  // L·∫•y token t·ª´ localStorage (ho·∫∑c sessionStorage n·∫øu b·∫°n l∆∞u n√≥ ·ªü ƒë√≥)

  const navigate = useNavigate(); // Hook ƒë·ªÉ ƒëi·ªÅu h∆∞·ªõng
  const token = localStorage.getItem("token");
  if (token) console.log(123);

  // chuy·ªÉn trang
  const renderContent = () => {
    switch (currentTab) {
      case "orders":
        return <div>Danh s√°ch ƒë∆°n h√†ng</div>;
      case "upload":
        return <div>ƒê∆°n h√†ng ƒë√£ thi·∫øt k·∫ø</div>;
      default:
        return <div>Ch·ªçn m·ªôt tab ƒë·ªÉ xem n·ªôi dung</div>;
    }
  };

  // Fetch d·ªØ li·ªáu ƒë∆°n h√†ng t·ª´ API
  const fetchOrders = async () => {
    setLoading(true);
    setError(""); // Reset l·ªói c≈©

    if (!token) {
      setError("Token kh√¥ng h·ª£p l·ªá ho·∫∑c kh√¥ng t·ªìn t·∫°i.");
      return;
    }

    try {
      const response = await fetch(
        "http://localhost:8081/api/v1/consulting-staff/orders",
        {
          method: "GET", // HTTP method GET
          headers: {
            "Content-Type": "application/json", // ƒê·ªãnh d·∫°ng d·ªØ li·ªáu l√† JSON
            Authorization: `Bearer ${token}`, // Th√™m token v√†o header
          },
        }
      );

      if (!response.ok) {
        const errorData = await response.json();
        console.log("Error status:", response.status);
        console.log("Error details:", errorData);
        setError("Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu");
        return;
      }

      const data = await response.json();
      setOrders(data.data); // C·∫≠p nh·∫≠t d·ªØ li·ªáu ƒë∆°n h√†ng
    } catch (error) {
      setError("L·ªói k·∫øt n·ªëi API");
    } finally {
      setLoading(false);
    }
  };
  console.log(orders);

  // Fetch d·ªØ li·ªáu khi component ƒë∆∞·ª£c mount
  useEffect(() => {
    fetchOrders();
  }, []);

  // ========================================l·∫•y d·ªØ li·ªáu b·∫£n v·∫Ω ƒë√£ ƒë∆∞·ª£c post====================================================
  useEffect(() => {
    const fetchDesigns = async () => {
      try {
        const response = await fetch(
          "http://localhost:8081/api/v1/consulting-staff/maintenance",
          {
            method: "GET",
            headers: {
              Authorization: `Bearer ${token}`,
              "Content-Type": "application/json",
            },
          }
        );

        if (!response.ok) {
          throw new Error(`HTTP error! Status: ${response.status}`);
        }

        const data = await response.json(); // L·∫•y d·ªØ li·ªáu JSON t·ª´ ph·∫£n h·ªìi
        console.log("üöÄ ~ fetchDesigns ~ data:", data);
        setDesigns(data.data.content); // L∆∞u d·ªØ li·ªáu v√†o state
      } catch (err) {
        setError(err.message); // L∆∞u th√¥ng b√°o l·ªói
      } finally {
        setLoading(false); // T·∫Øt tr·∫°ng th√°i loading
      }
    };

    fetchDesigns();
  }, []);

  if (loading) {
    return <div>Loading...</div>; // Hi·ªÉn th·ªã tr·∫°ng th√°i ƒëang t·∫£i
  }

  if (error) {
    return <div>Error: {error}</div>; // Hi·ªÉn th·ªã l·ªói n·∫øu c√≥
  }

  // ==========================sort recoder ID==================================

  const handleSort = () => {
    const sortedDesigns = [...designs].sort((a, b) => {
      if (sortOrder === "asc") {
        return a.recordId - b.recordId;
      } else {
        return b.recordId - a.recordId;
      }
    });
    setDesigns(sortedDesigns);
    setSortOrder(sortOrder === "asc" ? "desc" : "asc"); // ƒê·ªïi tr·∫°ng th√°i s·∫Øp x·∫øp
  };

  // =========================================L·∫§Y API TH√îNG TIN CHI TI·∫æT ƒê∆†N H√ÄNG============1===============================

  // ========================================= n·ªôi dung trang=================================
  return (
    <>
      <div className="design-staff-page">
        <div className="sidebar">
          <h2>TU V·∫§N KH√ÅCH H√ÄNG</h2>
          <ul>
            <li
              onClick={() => setCurrentTab("orders")} // Chuy·ªÉn tab sang "nhanvien"
              className={currentTab === "orders" ? "active" : ""}
            >
              Danh s√°ch ƒë∆°n h√†ng
            </li>
            <li
              onClick={() => setCurrentTab("baotri")} // Chuy·ªÉn tab sang "phananh"
              className={currentTab === "baotri" ? "active" : ""}
            >
              ƒê∆°n b·∫£o tr√¨
            </li>
          </ul>
        </div>

        <div className="main-content">
          {currentTab === "orders" && (
            <section className="order-list">
              <h3>Danh s√°ch ƒë∆°n h√†ng</h3>

              {/* Hi·ªÉn th·ªã l·ªói n·∫øu c√≥ */}
              {error && <p style={{ color: "red" }}>{error}</p>}

              {/* Hi·ªÉn th·ªã loading khi ƒëang t·∫£i */}
              {loading ? (
                <p>ƒêang t·∫£i...</p>
              ) : (
                <table>
                  <thead>
                    <tr>
                      <th>OrderID</th>
                      <th>Username</th>
                      <th>DesignDetails</th>
                      <th>StartDate</th>
                      <th>EndDate</th>
                      <th>Status</th>
                      <th>ChiTiet</th>
                      <th>Action</th>
                    </tr>
                  </thead>
                  <tbody>
                    {Array.isArray(orders) && orders.length > 0 ? (
                      orders.map((order) => (
                        <tr key={order.orderId}>
                          <td>{order.orderId}</td>
                          <td>{order.userName}</td>
                          <td>{order.designDetails}</td>
                          <td>{order.startDate}</td>
                          <td>{order.endDate}</td>
                          <td>{order.status}</td>
                          <td>
                            <Button
                              onClick={() => {
                                console.log("Handle click");
                                setOrderId(order.orderId);
                                setOpen(true);
                              }}
                            >
                              Chi ti·∫øt ƒë∆°n h√†ng
                            </Button>
                          </td>
                          <td>
                            <Button
                              onClick={() => {
                                setOrderId(order.orderId);
                                setOpenQuo(true);
                              }}
                            >
                              l·∫≠p b·∫£ng b√°o gi√°
                            </Button>
                          </td>
                        </tr>
                      ))
                    ) : (
                      <tr>
                        <td colSpan="5">Kh√¥ng c√≥ ƒë∆°n h√†ng n√†o.</td>
                      </tr>
                    )}
                  </tbody>
                </table>
              )}
            </section>
          )}

          {currentTab === "baotri" && (
            <section className="upload-form">
              <h3>Danh s√°ch b·∫£n v·∫Ω ƒë√£ g·ª≠i</h3>
              {/* Hi·ªÉn th·ªã l·ªói n·∫øu c√≥ */}
              {error && <p style={{ color: "red" }}>{error}</p>}

              {/* Hi·ªÉn th·ªã loading khi ƒëang t·∫£i */}
              {loading ? (
                <p>ƒêang t·∫£i...</p>
              ) : (
                <table>
                  <thead>
                    <tr>
                      <th onClick={handleSort} style={{ cursor: "pointer" }}>
                        Record ID {sortOrder === "asc" ? "‚Üë" : "‚Üì"}
                      </th>
                      <th>Engineer Name</th>
                      <th>Customer Name</th>
                      <th>Drawing File</th>
                      <th>Customer Feedback</th>
                      <th>Creation Date</th>
                      <th>Action</th>
                    </tr>
                  </thead>
                  <tbody>
                    {Array.isArray(designs) && designs.length > 0 ? (
                      designs.map((design) => (
                        <tr key={design.recordId}>
                          <td>{design.recordId}</td>
                          <td>{design.engineerName}</td>
                          <td>{design.customerName}</td>
                          <td>
                            <a
                              href={design.drawingFile}
                              target="_blank"
                              rel="noopener noreferrer"
                            >
                              View File
                            </a>
                          </td>
                          <td>{design.customerFeedback}</td>
                          <td>{design.creationDate}</td>
                          <td>
                            {/* <Button
                            // onClick={() => {
                            //   setUserId(design.recordId);
                            //   setOpen(true);
                            // }}
                            >
                              Update Design
                            </Button> */}
                            <Button
                              disabled={design.customerFeedback === null} // Ki·ªÉm tra n·∫øu customerFeedback l√† null
                              onClick={() => {
                                setRecordId(design.recordId);
                                setOpen(true);
                              }}
                            >
                              Update Design
                            </Button>
                            <Button
                              onClick={() => {
                                setRecordId(design.recordId);
                                setOpen(true);
                              }}
                            >
                              x√≥a b·∫£n v·∫Ω
                            </Button>
                          </td>
                        </tr>
                      ))
                    ) : (
                      <tr>
                        <td colSpan="7">No designs available.</td>
                      </tr>
                    )}
                  </tbody>
                </table>
              )}
            </section>
          )}
        </div>
      </div>
      <OrderDetailsModal
        orderId={orderId}
        open={open}
        handleClose={() => {
          setOrderId(undefined);
          setOpen(false);
        }}
      />
      <QuoForm
        orderId={orderId}
        open={openQuo}
        handleClose={() => {
          setOrderId(undefined);
          setOpenQuo(false);
        }}
      />
    </>
  );
};

export default ConsultingStaff;
