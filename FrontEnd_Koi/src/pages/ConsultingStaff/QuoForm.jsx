import { Button, message, Modal, Input } from "antd";
import { useState } from "react";

const QuoForm = ({ orderId, open, handleClose }) => {
  const token = localStorage.getItem("token");
  const [areaSize, setAreaSize] = useState(); // S·ªë
  const [location, setLocation] = useState(""); // Chu·ªói
  const [designDetails, setDesignDetails] = useState(""); // Chu·ªói
  const [materialCost, setMaterialCost] = useState(); // S·ªë
  const [laborCost, setLaborCost] = useState(); // S·ªë
  const [transportationCost, setTransportationCost] = useState(); // S·ªë
  const [totalCost, setTotalCost] = useState(); // S·ªë
  const [quotationDate, setQuotationDate] = useState(""); // Ng√†y ƒë·ªãnh d·∫°ng ISO (YYYY-MM-DD)
  const [expirationDate, setExpirationDate] = useState(""); // Ng√†y ƒë·ªãnh d·∫°ng ISO (YYYY-MM-DD)
  const formatDate = (date) => {
    const [year, month, day] = date.split("-");
    return `${day}-${month}-${year}`;
  };
  const handleSubmit = async () => {
    if (!orderId) {
      message.error("Kh√¥ng c√≥ userId");
      return;
    }
    const formattedQuotationDate = formatDate(quotationDate);
    const formattedExpiratonDate = formatDate(expirationDate);
    const formData = new FormData();
    formData.append("areaSize", areaSize); // S·ªë
    formData.append("location", location); // Chu·ªói
    formData.append("designDetails", designDetails); // Chu·ªói
    formData.append("materialCost", materialCost); // S·ªë
    formData.append("laborCost", laborCost); // S·ªë
    formData.append("transportationCost", transportationCost); // S·ªë
    formData.append("totalCost", totalCost); // S·ªë
    formData.append("quotationDate", formattedQuotationDate); // Ng√†y ƒë·ªãnh d·∫°ng ISO
    formData.append("expirationDate", formattedExpiratonDate); // Ng√†y ƒë·ªãnh d·∫°ng ISO (

    try {
      const response = await fetch(
        `http://localhost:8081/api/v1/designs/create/${orderId}`,
        {
          method: "POST",
          headers: {
            Authorization: `Bearer ${token}`,
          },
          body: formData,
        }
      );

      if (response.ok) {
        message.success("G·ª≠i d·ªØ li·ªáu th√†nh c√¥ng!");
        handleClose(); // ƒê√≥ng modal sau khi g·ª≠i th√†nh c√¥ng
      }
    } catch (error) {
      console.log("üöÄ ~ handleSubmit ~ error:", error);
    }
  };

  return (
    <Modal
      open={open}
      onCancel={handleClose}
      footer={null}
      title="L·∫≠p b·∫£n b√°o gi√°"
    >
      <form>
        {/* Input c√°c tr∆∞·ªùng */}
        <Input
          type="text"
          placeholder="Di·ªán t√≠ch khu v·ª±c"
          value={areaSize}
          onChange={(e) => setAreaSize(e.target.value)}
          style={{ marginBottom: "1rem" }}
        />

        <Input
          type="text"
          placeholder="ƒê·ªãa ƒëi·ªÉm"
          value={location}
          onChange={(e) => setLocation(e.target.value)}
          style={{ marginBottom: "1rem" }}
        />

        <Input
          type="text"
          placeholder="Chi ti·∫øt thi·∫øt k·∫ø"
          value={designDetails}
          onChange={(e) => setDesignDetails(e.target.value)}
          style={{ marginBottom: "1rem" }}
        />

        <Input
          type="number"
          placeholder="Chi ph√≠ nguy√™n v·∫≠t li·ªáu"
          value={materialCost}
          onChange={(e) => setMaterialCost(e.target.value)}
          style={{ marginBottom: "1rem" }}
        />

        <Input
          type="number"
          placeholder="Chi ph√≠ nh√¢n c√¥ng"
          value={laborCost}
          onChange={(e) => setLaborCost(e.target.value)}
          style={{ marginBottom: "1rem" }}
        />

        <Input
          type="number"
          placeholder="Chi ph√≠ v·∫≠n chuy·ªÉn"
          value={transportationCost}
          onChange={(e) => setTransportationCost(e.target.value)}
          style={{ marginBottom: "1rem" }}
        />

        <Input
          type="number"
          placeholder="T·ªïng chi ph√≠"
          value={totalCost}
          onChange={(e) => setTotalCost(e.target.value)}
          style={{ marginBottom: "1rem" }}
        />

        <Input
          type="date"
          placeholder="Ng√†y b√°o gi√°"
          value={quotationDate} // Qu·∫£n l√Ω ng√†y ·ªü ƒë·ªãnh d·∫°ng YYYY-MM-DD
          onChange={(e) => {
            setQuotationDate(e.target.value); // Ch·ªâ l∆∞u gi√° tr·ªã ng√†y chu·∫©n YYYY-MM-DD
          }}
          style={{ marginBottom: "1rem" }}
        />

        <Input
          type="date"
          placeholder="Ng√†y h·∫øt h·∫°n"
          value={expirationDate}
          onChange={(e) => {
            setExpirationDate(e.target.value); // Ch·ªâ l∆∞u gi√° tr·ªã ng√†y chu·∫©n YYYY-MM-DD
          }}
          style={{ marginBottom: "1rem" }}
        />

        <Button
          type="primary"
          onClick={handleSubmit}
          style={{ marginTop: "1rem" }}
        >
          G·ª≠i
        </Button>
      </form>
    </Modal>
  );
};

export default QuoForm;
